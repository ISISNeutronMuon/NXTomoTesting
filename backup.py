import datetime
import os
import numpy as np
import nexusformat.nexus.tree as nexus
from numpy.core.arrayprint import dtype_short_repr
import tifffile

def images_to_nxtomo(root, image_names, image_keys, angles):
    # Note this example script was generated by nxdl_to_hdf5.py using the current 
    # installed version of the NEXUS definitions ver[v2020.10] 
    
    main_entry = None
    
    root = nexus.NXroot() if root is None else root
    
    if root.NXentry:
        main_entry = root.NXentry[0]
    else:
        main_entry = nexus.NXentry()
        root['/entry'] = main_entry
    
    main_entry['tomo_entry'] = nexus.NXsubentry()
    entry = main_entry['tomo_entry']
    
    entry['instrument'] = nexus.NXinstrument()
    entry['instrument/source'] = nexus.NXsource()
    entry['instrument/detector'] = nexus.NXdetector()
    entry['sample'] = nexus.NXsample()
    # entry['control'] = nexus.NXmonitor()
    entry['data'] = nexus.NXdata()

    # Create the FIELDS 
    entry['title'] = nexus.NXfield('SAMPLE-CHAR-DATA')
    entry['start_time'] = nexus.NXfield(datetime.datetime.now().isoformat())#'2021-03-29T15:51:44.650319'
    entry['end_time'] = nexus.NXfield(datetime.datetime.now().isoformat())#'2021-03-29T15:51:44.652319')
    

    entry['definition'] = nexus.NXfield('NXtomo')
    entry['instrument/source/type'] = nexus.NXfield('Spallation Neutron Source')
    entry['instrument/source/name'] = nexus.NXfield('ISIS')
    entry['instrument/source/probe'] = nexus.NXfield('neutron')
    
    image = tifffile.imread(image_names[0])
    shape = (*image.shape, len(image_names))
    # print('shape: ', shape)
    # entry['instrument/detector/data'] = nexus.NXfield(shape=shape, dtype=image.dtype)
    # entry['instrument/detector/data'][:, :, 0] = image
    # for index, name in enumerate(image_names[1:]):
    #     import time  
    #     image = tifffile.imread(name)
    #     start = time.perf_counter() 
    #     entry['instrument/detector/data'][:, :, index + 1] = image
    #     print(time.perf_counter() - start, 'sec')
    #     print(index)
    import time  
    start = time.perf_counter() 
    images = np.zeros(shape, dtype=np.uint16)
    for index, name in enumerate(image_names):
        images[:, :, index] = tifffile.imread(name)
    print(time.perf_counter() - start, 'sec') 
    start = time.perf_counter()     
    entry['instrument/detector/data'] = nexus.NXfield(images, shape=shape, dtype=image.dtype)
    print(time.perf_counter() - start, 'sec') 
    entry['instrument/detector/image_key'] = nexus.NXfield(image_keys, dtype=np.uint8)
    
    
    entry['sample/name'] = nexus.NXfield('SAMPLE-CHAR-DATA')
    start = time.perf_counter()     
    entry['sample/rotation_angle'] = nexus.NXfield(angles, dtype=np.float32, axis='1', units='degrees')
    print(time.perf_counter() - start, 'sec') 
    
    # entry['sample/rotation_angle'].attrs['axis'] = '1'
    # entry['sample/rotation_angle'].attrs['units'] = 'degrees'
    
    # entry['control/data'] = nexus.NXfield(1.0)

    # Create the LINKS 
    entry['data/data'] = nexus.NXlink(target=f'{entry.nxpath}/instrument/detector/data')
    entry['data/rotation_angle'] = nexus.NXlink(target=f'{entry.nxpath}/sample/rotation_angle')
    entry['data/image_key'] = nexus.NXlink(target=f'{entry.nxpath}/instrument/detector/image_key')

def prepare_images(image_dir):
    images = {'dark_before': [], 'flat_before': [], 'projections': [], 'half_circle': [], 
              'flat_after': [], 'dark_after': []}
      
    keys = [2, 1, 0, 0, 1, 2]


    with os.scandir(image_dir) as it:
        for entry in it:
            if not entry.is_file():
                continue
            
            name = entry.name.lower()
            
            if not(name.endswith('.tiff') or name.endswith('.tif')):
                continue 
            
            if name.startswith('flat_'):
                images['flat_before'].append(entry.path)
            if name.startswith('dark_'):
                images['dark_before'].append(entry.path)
            if name.startswith('tomo_') or name.startswith('proj_'):
                images['projections'].append(entry.path)

    image_names = []
    image_keys = []
    angles = []
    for index, value in enumerate(images.values()):
        key = keys[index]
        size = len(value)
        image_names.extend(value)
        image_keys.extend([key] * size)
        angles.extend([0.0] * size)

    return image_names, image_keys, angles


if __name__ == '__main__':
    root = None
    in_filename = 'IMAT00008300.nxs'
    out_filename = 'NXtomo.nxs'
    image_dir = 'D:/Documents/Tilt 4 pre reco/reduced'
    # image_dir = 'D:/Downloads/dataset_phantom_rebin122_150um/reduced/'

    image_names, image_keys, angles = prepare_images(image_dir)
    
    if not image_names:
        raise ValueError('Images were not detected.')

    with nexus.NXFile('NXtomo.nxs', 'w') as out_file, nexus.NXFile(in_filename, 'r') as in_file:
        _, _ = in_file.readfile(), out_file.readfile()
        out_file.copyfile(in_file)
        root = out_file.readfile()
        images_to_nxtomo(root, image_names, image_keys, angles)


# def prepare_images(image_dir):
#     images = {'dark_before': [], 'flat_before': [], 'projections': [], 'half_circle': [], 
#               'flat_after': [], 'dark_after': []}
      
#     keys = [2, 1, 0, 0, 1, 2]

#     with os.scandir(image_dir) as it:
#         for entry in it:
#             if not entry.is_file():
#                 continue
            
#             name = entry.name.lower()
            
#             if not(name.endswith('.tiff') or name.endswith('.tif')):
#                 continue 
            
#             if name.startswith('flat_'):
#                 images['flat_before'].append(entry.path)
#             if name.startswith('dark_'):
#                 images['dark_before'].append(entry.path)
#             if name.startswith('tomo_') or name.startswith('proj_'):
#                 images['projections'].append(entry.path)

#     image_names = []
#     image_keys = []
#     angles = []
#     for index, value in enumerate(images.values()):
#         key = keys[index]
#         size = len(value)
#         image_names.extend(value)
#         image_keys.extend([key] * size)
#         angles.extend([0.0] * size)

#     return image_names, image_keys, angles